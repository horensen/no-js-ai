services:
  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
    image: no-js-ai-chat:latest
    container_name: no-js-ai-backend
    ports:
      - "3000:3000"
    env_file:
      - docker.env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/no-js-ai-chat
      - OLLAMA_URL=http://host.docker.internal:11434
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret-in-production}
      - TZ=UTC
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - no-js-ai-network
    restart: unless-stopped
    volumes:
      - backend_logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    # Enhanced resource limits and security
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MongoDB Database
  mongodb:
    image: mongo:8.0
    container_name: no-js-ai-mongodb
    environment:
      - MONGO_INITDB_DATABASE=no-js-ai-chat
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-changeme}
      - TZ=UTC
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only for security
    volumes:
      - mongodb_data:/data/db:rw
      - mongodb_config:/data/configdb:rw
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - no-js-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    # Enhanced resource limits for MongoDB
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # MongoDB configuration
    command: >
      mongod
      --auth
      --bind_ip_all
      --replSet rs0
      --keyFile /data/configdb/mongodb-keyfile
      --quiet

  # MongoDB Express for database management (development/staging only)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: no-js-ai-mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD:-changeme}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-pass}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
    ports:
      - "127.0.0.1:8081:8081"  # Bind to localhost only
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - no-js-ai-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    profiles:
      - dev
      - development
      - staging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis for session storage and caching (optional enhancement)
  redis:
    image: redis:7.2-alpine
    container_name: no-js-ai-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis-secure-password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data:rw
    networks:
      - no-js-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    profiles:
      - enhanced
      - production
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  no-js-ai-network:
    driver: bridge
    name: no-js-ai-network
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: no-js-ai-br0

volumes:
  mongodb_data:
    driver: local
    name: no-js-ai-mongodb-data
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-data/mongodb
  mongodb_config:
    driver: local
    name: no-js-ai-mongodb-config
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-data/mongodb-config
  backend_logs:
    driver: local
    name: no-js-ai-backend-logs
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-data/logs
  redis_data:
    driver: local
    name: no-js-ai-redis-data
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker-data/redis