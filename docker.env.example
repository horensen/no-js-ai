# Docker Environment Configuration for No-JS AI Chat
# Copy this file to docker.env and customize the values for your environment

# Application Environment
NODE_ENV=production
PORT=3000
TZ=UTC

# MongoDB Configuration (Docker Compose)
MONGODB_URI=mongodb://mongodb:27017/no-js-ai-chat

# MongoDB Authentication (recommended for production)
MONGO_ROOT_USER=admin
MONGO_ROOT_PASSWORD=changeme-secure-password-min-16-chars

# MongoDB Express (for database management - development only)
MONGO_EXPRESS_USER=admin
MONGO_EXPRESS_PASSWORD=secure-pass-min-12-chars

# Redis Configuration (optional - for enhanced session management and caching)
REDIS_PASSWORD=redis-secure-password-min-16-chars
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# Ollama Configuration
# Use host.docker.internal to access Ollama running on host machine
# For Linux, you might need to use the actual host IP or docker0 interface IP
OLLAMA_URL=http://host.docker.internal:11434
OLLAMA_MODEL=llama3.2

# Security Configuration
# IMPORTANT: Generate a secure random string with at least 32 characters
SESSION_SECRET=your-super-secret-session-key-change-this-in-production-minimum-32-chars-random-secure
# Additional security headers
HELMET_ENABLED=true
CORS_ORIGIN=http://localhost:3000

# Rate Limiting Configuration
RATE_LIMIT_ENABLED=true
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Message Validation
MAX_MESSAGE_LENGTH=2000
MAX_MESSAGES_PER_CONVERSATION=100

# Logging Configuration
LOG_LEVEL=info
LOG_FORMAT=json
MAX_LOG_FILES=5
MAX_LOG_SIZE=10m

# Streaming Configuration
STREAMING_ENABLED=true
THINKING_DELAY=1500
RESPONSE_TIMEOUT=30000

# Health Check Configuration
HEALTH_CHECK_INTERVAL=30000
HEALTH_CHECK_TIMEOUT=5000

# Docker and Infrastructure
COMPOSE_PROJECT_NAME=no-js-ai-chat
DOCKER_DEFAULT_PLATFORM=linux/amd64